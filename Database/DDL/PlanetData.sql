DROP TRIGGER [TU_TextureSize_AFTER]
GO
DROP TRIGGER [TD_TextureSize_AFTER]
GO
DROP TRIGGER [TU_Texture_AFTER]
GO
DROP TRIGGER [TD_Texture_AFTER]
GO
DROP TRIGGER [TU_TerrainTextureData_AFTER]
GO
DROP TRIGGER [TD_TerrainTextureData_AFTER]
GO
DROP TRIGGER [TU_TerrainFormulaSet_AFTER]
GO
DROP TRIGGER [TD_TerrainFormulaSet_AFTER]
GO
DROP TRIGGER [TU_TerrainFormulaLink_AFTER]
GO
DROP TRIGGER [TD_TerrainFormulaLink_AFTER]
GO
DROP TRIGGER [TU_TerrainFormula_AFTER]
GO
DROP TRIGGER [TD_TerrainFormula_AFTER]
GO
DROP TRIGGER [TU_TerrainDataFormulaDifficulty_AFTER]
GO
DROP TRIGGER [TD_TerrainDataFormulaDifficulty_AFTER]
GO
DROP TRIGGER [TU_TerrainDataFlatZone_AFTER]
GO
DROP TRIGGER [TD_TerrainDataFlatZone_AFTER]
GO
DROP TRIGGER [TU_TerrainData_AFTER]
GO
DROP TRIGGER [TD_TerrainData_AFTER]
GO
DROP TRIGGER [TU_PostProcessingKey_AFTER]
GO
DROP TRIGGER [TD_PostProcessingKey_AFTER]
GO
DROP TRIGGER [TU_PlanetPostProcessing_AFTER]
GO
DROP TRIGGER [TD_PlanetPostProcessing_AFTER]
GO
DROP TRIGGER [TU_PlanetOrbitData_AFTER]
GO
DROP TRIGGER [TD_PlanetOrbitData_AFTER]
GO
DROP TRIGGER [TU_PlanetLandmark_AFTER]
GO
DROP TRIGGER [TD_PlanetLandmark_AFTER]
GO
DROP TRIGGER [TU_PlanetBaseData_AFTER]
GO
DROP TRIGGER [TD_PlanetBaseData_AFTER]
GO
DROP TRIGGER [TU_PlanetAtmosphereVisualsData_AFTER]
GO
DROP TRIGGER [TD_PlanetAtmosphereVisualsData_AFTER]
GO
DROP TRIGGER [TU_PlanetAtmospherePhysicsData_AFTER]
GO
DROP TRIGGER [TD_PlanetAtmospherePhysicsData_AFTER]
GO
DROP TRIGGER [TU_PlanetAchievementData_AFTER]
GO
DROP TRIGGER [TD_PlanetAchievementData_AFTER]
GO
DROP TRIGGER [TU_Planet_AFTER]
GO
DROP TRIGGER [TD_Planet_AFTER]
GO
DROP TRIGGER [TU_Modifier_AFTER]
GO
DROP TRIGGER [TD_Modifier_AFTER]
GO
DROP TRIGGER [TU_Landmark_AFTER]
GO
DROP TRIGGER [TD_Landmark_AFTER]
GO
DROP TRIGGER [TU_Heightmap_AFTER]
GO
DROP TRIGGER [TD_Heightmap_AFTER]
GO
DROP TRIGGER [TU_Gradient_AFTER]
GO
DROP TRIGGER [TD_Gradient_AFTER]
GO
DROP TRIGGER [TU_FogKeySet_AFTER]
GO
DROP TRIGGER [TD_FogKeySet_AFTER]
GO
DROP TRIGGER [TU_FogKeyLink_AFTER]
GO
DROP TRIGGER [TD_FogKeyLink_AFTER]
GO
DROP TRIGGER [TU_FogKey_AFTER]
GO
DROP TRIGGER [TD_FogKey_AFTER]
GO
DROP TRIGGER [TU_FlatZone_AFTER]
GO
DROP TRIGGER [TD_FlatZone_AFTER]
GO
DROP TRIGGER [TU_Difficulty_AFTER]
GO
DROP TRIGGER [TD_Difficulty_AFTER]
GO
DROP TRIGGER [TU_Colour_AFTER]
GO
DROP TRIGGER [TD_Colour_AFTER]
GO
DROP TRIGGER [TU_Cloud_AFTER]
GO
DROP TRIGGER [TD_Cloud_AFTER]
GO
ALTER TABLE [Texture] DROP CONSTRAINT [FK_Texture_TextureSize]
GO
ALTER TABLE [TerrainTextureData] DROP CONSTRAINT [FK_TerrainTextureData_Texture2]
GO
ALTER TABLE [TerrainTextureData] DROP CONSTRAINT [FK_TerrainTextureData_Texture1]
GO
ALTER TABLE [TerrainTextureData] DROP CONSTRAINT [FK_TerrainTextureData_Texture]
GO
ALTER TABLE [TerrainFormulaLink] DROP CONSTRAINT [FK_TerrainFormulaLink_TerrainFormulaSet]
GO
ALTER TABLE [TerrainFormulaLink] DROP CONSTRAINT [FK_TerrainFormulaLink_TerrainFormula]
GO
ALTER TABLE [TerrainFormula] DROP CONSTRAINT [FK_TerrainFormula_TerrainFormula]
GO
ALTER TABLE [TerrainFormula] DROP CONSTRAINT [FK_TerrainFormula_Modifier]
GO
ALTER TABLE [TerrainFormula] DROP CONSTRAINT [FK_TerrainFormula_Heightmap]
GO
ALTER TABLE [TerrainDataFormulaDifficulty] DROP CONSTRAINT [FK_TerrainDataFormulaDifficulty_TerrainFormulaSet]
GO
ALTER TABLE [TerrainDataFormulaDifficulty] DROP CONSTRAINT [FK_TerrainDataFormulaDifficulty_TerrainData]
GO
ALTER TABLE [TerrainDataFormulaDifficulty] DROP CONSTRAINT [FK_TerrainDataFormulaDifficulty_Difficulty]
GO
ALTER TABLE [TerrainDataFlatZone] DROP CONSTRAINT [FK_TerrainDataFlatZone_TerrainData]
GO
ALTER TABLE [TerrainDataFlatZone] DROP CONSTRAINT [FK_TerrainDataFlatZone_FlatZone]
GO
ALTER TABLE [TerrainData] DROP CONSTRAINT [FK_TerrainData_TerrainTextureData]
GO
ALTER TABLE [TerrainData] DROP CONSTRAINT [FK_TerrainData_Planet]
GO
ALTER TABLE [PlanetPostProcessing] DROP CONSTRAINT [FK_PlanetPostProcessing_PostProcessingKey]
GO
ALTER TABLE [PlanetPostProcessing] DROP CONSTRAINT [FK_PlanetPostProcessing_Planet]
GO
ALTER TABLE [PlanetOrbitData] DROP CONSTRAINT [FK_PlanetOrbitData_Planet]
GO
ALTER TABLE [PlanetOrbitData] DROP CONSTRAINT [FK_PlanetOrbitData_ParentPlanet]
GO
ALTER TABLE [PlanetLandmark] DROP CONSTRAINT [FK_PlanetLandmark_Planet]
GO
ALTER TABLE [PlanetLandmark] DROP CONSTRAINT [FK_PlanetLandmark_Landmark]
GO
ALTER TABLE [PlanetBaseData] DROP CONSTRAINT [FK_PlanetBaseData_Planet]
GO
ALTER TABLE [PlanetBaseData] DROP CONSTRAINT [FK_PlanetBaseData_Colour]
GO
ALTER TABLE [PlanetAtmosphereVisualsData] DROP CONSTRAINT [FK_PlanetAtmosphereVisualsData_Planet]
GO
ALTER TABLE [PlanetAtmosphereVisualsData] DROP CONSTRAINT [FK_PlanetAtmosphereVisualsData_Gradient]
GO
ALTER TABLE [PlanetAtmosphereVisualsData] DROP CONSTRAINT [FK_PlanetAtmosphereVisualsData_FogKeySet]
GO
ALTER TABLE [PlanetAtmosphereVisualsData] DROP CONSTRAINT [FK_PlanetAtmosphereVisualsData_Cloud]
GO
ALTER TABLE [PlanetAtmospherePhysicsData] DROP CONSTRAINT [FK_PlanetAtmospherePhysicsData_Planet]
GO
ALTER TABLE [PlanetAchievementData] DROP CONSTRAINT [FK_PlanetAchievementData_Planet]
GO
ALTER TABLE [FogKeyLink] DROP CONSTRAINT [FK_FogKeyLink_FogKeySet]
GO
ALTER TABLE [FogKeyLink] DROP CONSTRAINT [FK_FogKeyLink_FogKey]
GO
ALTER TABLE [FogKey] DROP CONSTRAINT [FK_FogKey_Colour]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[TextureSize]') AND type in (N'U'))
DROP TABLE [TextureSize]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Texture]') AND type in (N'U'))
DROP TABLE [Texture]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[TerrainTextureData]') AND type in (N'U'))
DROP TABLE [TerrainTextureData]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[TerrainFormulaSet]') AND type in (N'U'))
DROP TABLE [TerrainFormulaSet]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[TerrainFormulaLink]') AND type in (N'U'))
DROP TABLE [TerrainFormulaLink]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[TerrainFormula]') AND type in (N'U'))
DROP TABLE [TerrainFormula]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[TerrainDataFormulaDifficulty]') AND type in (N'U'))
DROP TABLE [TerrainDataFormulaDifficulty]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[TerrainDataFlatZone]') AND type in (N'U'))
DROP TABLE [TerrainDataFlatZone]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[TerrainData]') AND type in (N'U'))
DROP TABLE [TerrainData]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[PostProcessingKey]') AND type in (N'U'))
DROP TABLE [PostProcessingKey]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[PlanetPostProcessing]') AND type in (N'U'))
DROP TABLE [PlanetPostProcessing]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[PlanetOrbitData]') AND type in (N'U'))
DROP TABLE [PlanetOrbitData]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[PlanetLandmark]') AND type in (N'U'))
DROP TABLE [PlanetLandmark]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[PlanetBaseData]') AND type in (N'U'))
DROP TABLE [PlanetBaseData]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[PlanetAtmosphereVisualsData]') AND type in (N'U'))
DROP TABLE [PlanetAtmosphereVisualsData]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[PlanetAtmospherePhysicsData]') AND type in (N'U'))
DROP TABLE [PlanetAtmospherePhysicsData]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[PlanetAchievementData]') AND type in (N'U'))
DROP TABLE [PlanetAchievementData]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Planet]') AND type in (N'U'))
DROP TABLE [Planet]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Modifier]') AND type in (N'U'))
DROP TABLE [Modifier]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Landmark]') AND type in (N'U'))
DROP TABLE [Landmark]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Heightmap]') AND type in (N'U'))
DROP TABLE [Heightmap]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Gradient]') AND type in (N'U'))
DROP TABLE [Gradient]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[FogKeySet]') AND type in (N'U'))
DROP TABLE [FogKeySet]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[FogKeyLink]') AND type in (N'U'))
DROP TABLE [FogKeyLink]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[FogKey]') AND type in (N'U'))
DROP TABLE [FogKey]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[FlatZone]') AND type in (N'U'))
DROP TABLE [FlatZone]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Difficulty]') AND type in (N'U'))
DROP TABLE [Difficulty]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Colour]') AND type in (N'U'))
DROP TABLE [Colour]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Cloud]') AND type in (N'U'))
DROP TABLE [Cloud]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[AuditLog]') AND type in (N'U'))
DROP TABLE [AuditLog]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [AuditLog](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[TriggerDate] [datetime2](7) NOT NULL,
	[SourceContext] [nvarchar](100) NOT NULL,
	[Operation] [nvarchar](16) NOT NULL,
	[DatabaseName] [nvarchar](64) NOT NULL,
	[SchemaName] [nvarchar](64) NOT NULL,
	[TableName] [nvarchar](64) NOT NULL,
	[TableId] [int] NOT NULL,
	[LogData] [nvarchar](max) NOT NULL,
 CONSTRAINT [PK_AuditLog] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Cloud](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Title] [nvarchar](50) NOT NULL,
	[Texture] [nvarchar](50) NOT NULL,
	[StartHeight] [decimal](21, 3) NOT NULL,
	[Width] [decimal](21, 3) NOT NULL,
	[Height] [decimal](21, 3) NOT NULL,
	[Alpha] [decimal](21, 3) NOT NULL,
	[Velocity] [decimal](21, 3) NOT NULL,
 CONSTRAINT [PK_Cloud] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ_Cloud] UNIQUE NONCLUSTERED 
(
	[Texture] ASC,
	[StartHeight] ASC,
	[Width] ASC,
	[Height] ASC,
	[Alpha] ASC,
	[Velocity] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ_Cloud_Title] UNIQUE NONCLUSTERED 
(
	[Title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Colour](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Title] [nvarchar](50) NOT NULL,
	[Red] [decimal](6, 3) NOT NULL,
	[Green] [decimal](6, 3) NOT NULL,
	[Blue] [decimal](6, 3) NOT NULL,
	[Alpha] [decimal](6, 3) NOT NULL,
 CONSTRAINT [PK_Colour] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ_Colour] UNIQUE NONCLUSTERED 
(
	[Red] ASC,
	[Green] ASC,
	[Blue] ASC,
	[Alpha] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ_Colour_Title] UNIQUE NONCLUSTERED 
(
	[Title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Difficulty](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Title] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_Difficulty] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ_Difficulty] UNIQUE NONCLUSTERED 
(
	[Title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [FlatZone](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Title] [nvarchar](50) NOT NULL,
	[Height] [decimal](21, 3) NOT NULL,
	[Angle] [decimal](21, 3) NOT NULL,
	[Width] [decimal](21, 3) NOT NULL,
	[Transition] [decimal](21, 3) NOT NULL,
 CONSTRAINT [PK_FlatZone] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ_FlatZone] UNIQUE NONCLUSTERED 
(
	[Height] ASC,
	[Angle] ASC,
	[Width] ASC,
	[Transition] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ_FlatZone_Title] UNIQUE NONCLUSTERED 
(
	[Title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [FogKey](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ColourId] [int] NOT NULL,
	[Distance] [decimal](21, 3) NOT NULL,
 CONSTRAINT [PK_FogKey] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ_FogKey] UNIQUE NONCLUSTERED 
(
	[ColourId] ASC,
	[Distance] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [FogKeyLink](
	[Id] [int] NOT NULL,
	[FogKeyId] [int] NOT NULL,
	[FogKeySetId] [int] NOT NULL,
 CONSTRAINT [PK_FogKeyLink] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [FogKeySet](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Title] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_FogKeySet] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ_FogKeyList_Title] UNIQUE NONCLUSTERED 
(
	[Title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Gradient](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Title] [nvarchar](50) NOT NULL,
	[PositionZ] [decimal](21, 3) NOT NULL,
	[Height] [decimal](21, 3) NOT NULL,
	[Texture] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_Gradient] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ_Gradient] UNIQUE NONCLUSTERED 
(
	[PositionZ] ASC,
	[Height] ASC,
	[Texture] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ_Gradient_Title] UNIQUE NONCLUSTERED 
(
	[Title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Heightmap](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Title] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_Heightmap] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ_Heightmap] UNIQUE NONCLUSTERED 
(
	[Title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Landmark](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Title] [nvarchar](50) NOT NULL,
	[Angle] [decimal](21, 3) NOT NULL,
	[StartAngle] [decimal](21, 3) NOT NULL,
	[EndAngle] [decimal](21, 3) NOT NULL,
 CONSTRAINT [PK_Landmark] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ_Landmark_Title] UNIQUE NONCLUSTERED 
(
	[Title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Modifier](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Title] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_Modifier] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ_Modifier] UNIQUE NONCLUSTERED 
(
	[Title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Planet](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Title] [nvarchar](50) NOT NULL,
	[GameVersion] [decimal](2, 1) NOT NULL,
 CONSTRAINT [PK_Planet] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ_Planet] UNIQUE NONCLUSTERED 
(
	[Title] ASC,
	[GameVersion] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [PlanetAchievementData](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PlanetId] [int] NOT NULL,
	[Landed] [bit] NOT NULL,
	[Takeoff] [bit] NOT NULL,
	[Atmosphere] [bit] NOT NULL,
	[Orbit] [bit] NOT NULL,
	[Crash] [bit] NOT NULL,
 CONSTRAINT [PK_PlanetAchievementData] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ_PlanetAchievementData] UNIQUE NONCLUSTERED 
(
	[PlanetId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [PlanetAtmospherePhysicsData](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PlanetId] [int] NOT NULL,
	[Height] [decimal](21, 3) NOT NULL,
	[Density] [decimal](21, 3) NOT NULL,
	[Curve] [decimal](21, 3) NOT NULL,
	[ParachuteMultiplier] [decimal](21, 3) NOT NULL,
	[UpperAtmosphere] [decimal](21, 3) NOT NULL,
	[ShockwaveIntensity] [decimal](21, 3) NOT NULL,
	[MinHeatingVelocityMultiplier] [decimal](21, 3) NOT NULL,
 CONSTRAINT [PK_PlanetAtmospherePhysicsData] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ_PlanetAtmospherePhysicsData] UNIQUE NONCLUSTERED 
(
	[PlanetId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [PlanetAtmosphereVisualsData](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PlanetId] [int] NOT NULL,
	[GradientId] [int] NOT NULL,
	[CloudId] [int] NOT NULL,
	[FogKeySetId] [int] NOT NULL,
 CONSTRAINT [PK_PlanetAtmosphereVisualsData] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ_PlanetAtmosphereVisualsData] UNIQUE NONCLUSTERED 
(
	[PlanetId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [PlanetBaseData](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PlanetId] [int] NOT NULL,
	[ColourId] [int] NOT NULL,
	[Radius] [decimal](21, 3) NOT NULL,
	[Gravity] [decimal](21, 3) NOT NULL,
	[TimewarpHeight] [decimal](21, 3) NOT NULL,
	[VelocityArrowsHeight] [decimal](21, 3) NOT NULL,
 CONSTRAINT [PK_PlanetBaseData] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ_PlanetBaseData] UNIQUE NONCLUSTERED 
(
	[PlanetId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [PlanetLandmark](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PlanetId] [int] NOT NULL,
	[LandmarkId] [int] NOT NULL,
 CONSTRAINT [PK_PlanetLandmark] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ_PlanetLandmark] UNIQUE NONCLUSTERED 
(
	[PlanetId] ASC,
	[LandmarkId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [PlanetOrbitData](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PlanetId] [int] NOT NULL,
	[ParentPlanetId] [int] NOT NULL,
	[SemiMajorAxis] [decimal](21, 3) NOT NULL,
	[Eccentricity] [decimal](21, 3) NOT NULL,
	[ArgumentOfPeriapsis] [decimal](21, 3) NOT NULL,
	[Direction] [decimal](21, 3) NOT NULL,
	[MultiplierSOI] [decimal](21, 3) NOT NULL,
 CONSTRAINT [PK_PlanetOrbitData] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [PlanetPostProcessing](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PlanetId] [int] NOT NULL,
	[PostProcessingKeyId] [int] NOT NULL,
 CONSTRAINT [PK_PlanetPostProcessing] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ_PlanetPostProcessing] UNIQUE NONCLUSTERED 
(
	[PlanetId] ASC,
	[PostProcessingKeyId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [PostProcessingKey](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Title] [nvarchar](50) NOT NULL,
	[Height] [decimal](21, 3) NOT NULL,
	[ShadowIntensity] [decimal](21, 3) NOT NULL,
	[StarIntensity] [decimal](21, 3) NOT NULL,
	[HueShift] [decimal](21, 3) NOT NULL,
	[Saturation] [decimal](21, 3) NOT NULL,
	[Contrast] [decimal](21, 3) NOT NULL,
	[Red] [decimal](21, 3) NOT NULL,
	[Green] [decimal](21, 3) NOT NULL,
	[Blue] [decimal](21, 3) NOT NULL,
 CONSTRAINT [PK_PostProcessingKey] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ_PostProcessingKey] UNIQUE NONCLUSTERED 
(
	[Height] ASC,
	[ShadowIntensity] ASC,
	[StarIntensity] ASC,
	[HueShift] ASC,
	[Saturation] ASC,
	[Contrast] ASC,
	[Red] ASC,
	[Green] ASC,
	[Blue] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ_PostProcessingKey_Title] UNIQUE NONCLUSTERED 
(
	[Title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [TerrainData](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PlanetId] [int] NOT NULL,
	[TerrainTextureDataId] [int] NOT NULL,
	[VerticeSize] [decimal](21, 3) NOT NULL,
	[Collider] [bit] NOT NULL,
 CONSTRAINT [PK_TerrainData] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [TerrainDataFlatZone](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[TerrainDataId] [int] NOT NULL,
	[FlatZoneId] [int] NOT NULL,
 CONSTRAINT [PK_TerrainDataFlatZone] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ_TerrainDataFlatZone] UNIQUE NONCLUSTERED 
(
	[TerrainDataId] ASC,
	[FlatZoneId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [TerrainDataFormulaDifficulty](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[TerrainDataId] [int] NOT NULL,
	[DifficultyId] [int] NOT NULL,
	[TerrainFormulaSetId] [int] NOT NULL,
 CONSTRAINT [PK_TerrainDataFormulaDifficulty] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ_TerrainDataFormulaDifficulty] UNIQUE NONCLUSTERED 
(
	[TerrainDataId] ASC,
	[DifficultyId] ASC,
	[TerrainFormulaSetId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [TerrainFormula](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Title] [nvarchar](50) NOT NULL,
	[HeightmapId] [int] NOT NULL,
	[Width] [decimal](21, 3) NOT NULL,
	[Height] [decimal](21, 3) NOT NULL,
	[ModifierId] [int] NULL,
	[AddOnFormulaId] [int] NULL,
 CONSTRAINT [PK_TerrainFormula] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ_TerrainFormula_Title] UNIQUE NONCLUSTERED 
(
	[Title] ASC,
	[HeightmapId] ASC,
	[Width] ASC,
	[Height] ASC,
	[ModifierId] ASC,
	[AddOnFormulaId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [TerrainFormulaLink](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[TerrainFormulaId] [int] NOT NULL,
	[TerrainFormulaSetId] [int] NOT NULL,
 CONSTRAINT [PK_TerrainFormulaLink] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [TerrainFormulaSet](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Title] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_TerrainFormulaSet] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ_TerrainFormulaSet] UNIQUE NONCLUSTERED 
(
	[Title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [TerrainTextureData](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Title] [nvarchar](50) NOT NULL,
	[PlanetTexture] [nvarchar](50) NOT NULL,
	[PlanetTextureCutout] [decimal](21, 3) NOT NULL,
	[SurfaceTextureA] [int] NOT NULL,
	[SurfaceTextureB] [int] NOT NULL,
	[TerrainTextureC] [int] NOT NULL,
	[SurfaceLayerSize] [decimal](21, 3) NOT NULL,
	[MinFade] [decimal](21, 3) NOT NULL,
	[MaxFade] [decimal](21, 3) NOT NULL,
	[ShadowIntensity] [decimal](21, 3) NOT NULL,
	[ShadowHeight] [decimal](21, 3) NOT NULL,
 CONSTRAINT [PK_TerrainTextureData] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ_TerrainTexture] UNIQUE NONCLUSTERED 
(
	[PlanetTexture] ASC,
	[PlanetTextureCutout] ASC,
	[SurfaceTextureA] ASC,
	[SurfaceTextureB] ASC,
	[TerrainTextureC] ASC,
	[SurfaceLayerSize] ASC,
	[MinFade] ASC,
	[MaxFade] ASC,
	[ShadowIntensity] ASC,
	[ShadowHeight] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ_TerrainTextureData_Title] UNIQUE NONCLUSTERED 
(
	[Title] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Texture](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Title] [nvarchar](50) NOT NULL,
	[TextureSizeId] [int] NOT NULL,
 CONSTRAINT [PK_Texture] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ_Texture] UNIQUE NONCLUSTERED 
(
	[Title] ASC,
	[TextureSizeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [TextureSize](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[X] [decimal](21, 3) NOT NULL,
	[Y] [decimal](21, 3) NOT NULL,
 CONSTRAINT [PK_TextureSize] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UQ_TextureSize] UNIQUE NONCLUSTERED 
(
	[X] ASC,
	[Y] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [FogKey]  WITH CHECK ADD  CONSTRAINT [FK_FogKey_Colour] FOREIGN KEY([ColourId])
REFERENCES [Colour] ([Id])
GO
ALTER TABLE [FogKey] CHECK CONSTRAINT [FK_FogKey_Colour]
GO
ALTER TABLE [FogKeyLink]  WITH CHECK ADD  CONSTRAINT [FK_FogKeyLink_FogKey] FOREIGN KEY([FogKeyId])
REFERENCES [FogKey] ([Id])
GO
ALTER TABLE [FogKeyLink] CHECK CONSTRAINT [FK_FogKeyLink_FogKey]
GO
ALTER TABLE [FogKeyLink]  WITH CHECK ADD  CONSTRAINT [FK_FogKeyLink_FogKeySet] FOREIGN KEY([FogKeySetId])
REFERENCES [FogKeySet] ([Id])
GO
ALTER TABLE [FogKeyLink] CHECK CONSTRAINT [FK_FogKeyLink_FogKeySet]
GO
ALTER TABLE [PlanetAchievementData]  WITH CHECK ADD  CONSTRAINT [FK_PlanetAchievementData_Planet] FOREIGN KEY([PlanetId])
REFERENCES [Planet] ([Id])
GO
ALTER TABLE [PlanetAchievementData] CHECK CONSTRAINT [FK_PlanetAchievementData_Planet]
GO
ALTER TABLE [PlanetAtmospherePhysicsData]  WITH CHECK ADD  CONSTRAINT [FK_PlanetAtmospherePhysicsData_Planet] FOREIGN KEY([PlanetId])
REFERENCES [Planet] ([Id])
GO
ALTER TABLE [PlanetAtmospherePhysicsData] CHECK CONSTRAINT [FK_PlanetAtmospherePhysicsData_Planet]
GO
ALTER TABLE [PlanetAtmosphereVisualsData]  WITH CHECK ADD  CONSTRAINT [FK_PlanetAtmosphereVisualsData_Cloud] FOREIGN KEY([CloudId])
REFERENCES [Cloud] ([Id])
GO
ALTER TABLE [PlanetAtmosphereVisualsData] CHECK CONSTRAINT [FK_PlanetAtmosphereVisualsData_Cloud]
GO
ALTER TABLE [PlanetAtmosphereVisualsData]  WITH CHECK ADD  CONSTRAINT [FK_PlanetAtmosphereVisualsData_FogKeySet] FOREIGN KEY([FogKeySetId])
REFERENCES [FogKeySet] ([Id])
GO
ALTER TABLE [PlanetAtmosphereVisualsData] CHECK CONSTRAINT [FK_PlanetAtmosphereVisualsData_FogKeySet]
GO
ALTER TABLE [PlanetAtmosphereVisualsData]  WITH CHECK ADD  CONSTRAINT [FK_PlanetAtmosphereVisualsData_Gradient] FOREIGN KEY([GradientId])
REFERENCES [Gradient] ([Id])
GO
ALTER TABLE [PlanetAtmosphereVisualsData] CHECK CONSTRAINT [FK_PlanetAtmosphereVisualsData_Gradient]
GO
ALTER TABLE [PlanetAtmosphereVisualsData]  WITH CHECK ADD  CONSTRAINT [FK_PlanetAtmosphereVisualsData_Planet] FOREIGN KEY([PlanetId])
REFERENCES [Planet] ([Id])
GO
ALTER TABLE [PlanetAtmosphereVisualsData] CHECK CONSTRAINT [FK_PlanetAtmosphereVisualsData_Planet]
GO
ALTER TABLE [PlanetBaseData]  WITH CHECK ADD  CONSTRAINT [FK_PlanetBaseData_Colour] FOREIGN KEY([ColourId])
REFERENCES [Colour] ([Id])
GO
ALTER TABLE [PlanetBaseData] CHECK CONSTRAINT [FK_PlanetBaseData_Colour]
GO
ALTER TABLE [PlanetBaseData]  WITH CHECK ADD  CONSTRAINT [FK_PlanetBaseData_Planet] FOREIGN KEY([PlanetId])
REFERENCES [Planet] ([Id])
GO
ALTER TABLE [PlanetBaseData] CHECK CONSTRAINT [FK_PlanetBaseData_Planet]
GO
ALTER TABLE [PlanetLandmark]  WITH CHECK ADD  CONSTRAINT [FK_PlanetLandmark_Landmark] FOREIGN KEY([LandmarkId])
REFERENCES [Landmark] ([Id])
GO
ALTER TABLE [PlanetLandmark] CHECK CONSTRAINT [FK_PlanetLandmark_Landmark]
GO
ALTER TABLE [PlanetLandmark]  WITH CHECK ADD  CONSTRAINT [FK_PlanetLandmark_Planet] FOREIGN KEY([PlanetId])
REFERENCES [Planet] ([Id])
GO
ALTER TABLE [PlanetLandmark] CHECK CONSTRAINT [FK_PlanetLandmark_Planet]
GO
ALTER TABLE [PlanetOrbitData]  WITH CHECK ADD  CONSTRAINT [FK_PlanetOrbitData_ParentPlanet] FOREIGN KEY([ParentPlanetId])
REFERENCES [Planet] ([Id])
GO
ALTER TABLE [PlanetOrbitData] CHECK CONSTRAINT [FK_PlanetOrbitData_ParentPlanet]
GO
ALTER TABLE [PlanetOrbitData]  WITH CHECK ADD  CONSTRAINT [FK_PlanetOrbitData_Planet] FOREIGN KEY([PlanetId])
REFERENCES [Planet] ([Id])
GO
ALTER TABLE [PlanetOrbitData] CHECK CONSTRAINT [FK_PlanetOrbitData_Planet]
GO
ALTER TABLE [PlanetPostProcessing]  WITH CHECK ADD  CONSTRAINT [FK_PlanetPostProcessing_Planet] FOREIGN KEY([PlanetId])
REFERENCES [Planet] ([Id])
GO
ALTER TABLE [PlanetPostProcessing] CHECK CONSTRAINT [FK_PlanetPostProcessing_Planet]
GO
ALTER TABLE [PlanetPostProcessing]  WITH CHECK ADD  CONSTRAINT [FK_PlanetPostProcessing_PostProcessingKey] FOREIGN KEY([PostProcessingKeyId])
REFERENCES [PostProcessingKey] ([Id])
GO
ALTER TABLE [PlanetPostProcessing] CHECK CONSTRAINT [FK_PlanetPostProcessing_PostProcessingKey]
GO
ALTER TABLE [TerrainData]  WITH CHECK ADD  CONSTRAINT [FK_TerrainData_Planet] FOREIGN KEY([PlanetId])
REFERENCES [Planet] ([Id])
GO
ALTER TABLE [TerrainData] CHECK CONSTRAINT [FK_TerrainData_Planet]
GO
ALTER TABLE [TerrainData]  WITH CHECK ADD  CONSTRAINT [FK_TerrainData_TerrainTextureData] FOREIGN KEY([TerrainTextureDataId])
REFERENCES [TerrainTextureData] ([Id])
GO
ALTER TABLE [TerrainData] CHECK CONSTRAINT [FK_TerrainData_TerrainTextureData]
GO
ALTER TABLE [TerrainDataFlatZone]  WITH CHECK ADD  CONSTRAINT [FK_TerrainDataFlatZone_FlatZone] FOREIGN KEY([FlatZoneId])
REFERENCES [FlatZone] ([Id])
GO
ALTER TABLE [TerrainDataFlatZone] CHECK CONSTRAINT [FK_TerrainDataFlatZone_FlatZone]
GO
ALTER TABLE [TerrainDataFlatZone]  WITH CHECK ADD  CONSTRAINT [FK_TerrainDataFlatZone_TerrainData] FOREIGN KEY([TerrainDataId])
REFERENCES [TerrainData] ([Id])
GO
ALTER TABLE [TerrainDataFlatZone] CHECK CONSTRAINT [FK_TerrainDataFlatZone_TerrainData]
GO
ALTER TABLE [TerrainDataFormulaDifficulty]  WITH CHECK ADD  CONSTRAINT [FK_TerrainDataFormulaDifficulty_Difficulty] FOREIGN KEY([DifficultyId])
REFERENCES [Difficulty] ([Id])
GO
ALTER TABLE [TerrainDataFormulaDifficulty] CHECK CONSTRAINT [FK_TerrainDataFormulaDifficulty_Difficulty]
GO
ALTER TABLE [TerrainDataFormulaDifficulty]  WITH CHECK ADD  CONSTRAINT [FK_TerrainDataFormulaDifficulty_TerrainData] FOREIGN KEY([TerrainDataId])
REFERENCES [TerrainData] ([Id])
GO
ALTER TABLE [TerrainDataFormulaDifficulty] CHECK CONSTRAINT [FK_TerrainDataFormulaDifficulty_TerrainData]
GO
ALTER TABLE [TerrainDataFormulaDifficulty]  WITH CHECK ADD  CONSTRAINT [FK_TerrainDataFormulaDifficulty_TerrainFormulaSet] FOREIGN KEY([TerrainFormulaSetId])
REFERENCES [TerrainFormulaSet] ([Id])
GO
ALTER TABLE [TerrainDataFormulaDifficulty] CHECK CONSTRAINT [FK_TerrainDataFormulaDifficulty_TerrainFormulaSet]
GO
ALTER TABLE [TerrainFormula]  WITH CHECK ADD  CONSTRAINT [FK_TerrainFormula_Heightmap] FOREIGN KEY([HeightmapId])
REFERENCES [Heightmap] ([Id])
GO
ALTER TABLE [TerrainFormula] CHECK CONSTRAINT [FK_TerrainFormula_Heightmap]
GO
ALTER TABLE [TerrainFormula]  WITH CHECK ADD  CONSTRAINT [FK_TerrainFormula_Modifier] FOREIGN KEY([ModifierId])
REFERENCES [Modifier] ([Id])
GO
ALTER TABLE [TerrainFormula] CHECK CONSTRAINT [FK_TerrainFormula_Modifier]
GO
ALTER TABLE [TerrainFormula]  WITH CHECK ADD  CONSTRAINT [FK_TerrainFormula_TerrainFormula] FOREIGN KEY([AddOnFormulaId])
REFERENCES [TerrainFormula] ([Id])
GO
ALTER TABLE [TerrainFormula] CHECK CONSTRAINT [FK_TerrainFormula_TerrainFormula]
GO
ALTER TABLE [TerrainFormulaLink]  WITH CHECK ADD  CONSTRAINT [FK_TerrainFormulaLink_TerrainFormula] FOREIGN KEY([TerrainFormulaId])
REFERENCES [TerrainFormula] ([Id])
GO
ALTER TABLE [TerrainFormulaLink] CHECK CONSTRAINT [FK_TerrainFormulaLink_TerrainFormula]
GO
ALTER TABLE [TerrainFormulaLink]  WITH CHECK ADD  CONSTRAINT [FK_TerrainFormulaLink_TerrainFormulaSet] FOREIGN KEY([TerrainFormulaSetId])
REFERENCES [TerrainFormulaSet] ([Id])
GO
ALTER TABLE [TerrainFormulaLink] CHECK CONSTRAINT [FK_TerrainFormulaLink_TerrainFormulaSet]
GO
ALTER TABLE [TerrainTextureData]  WITH CHECK ADD  CONSTRAINT [FK_TerrainTextureData_Texture] FOREIGN KEY([SurfaceTextureA])
REFERENCES [Texture] ([Id])
GO
ALTER TABLE [TerrainTextureData] CHECK CONSTRAINT [FK_TerrainTextureData_Texture]
GO
ALTER TABLE [TerrainTextureData]  WITH CHECK ADD  CONSTRAINT [FK_TerrainTextureData_Texture1] FOREIGN KEY([SurfaceTextureB])
REFERENCES [Texture] ([Id])
GO
ALTER TABLE [TerrainTextureData] CHECK CONSTRAINT [FK_TerrainTextureData_Texture1]
GO
ALTER TABLE [TerrainTextureData]  WITH CHECK ADD  CONSTRAINT [FK_TerrainTextureData_Texture2] FOREIGN KEY([TerrainTextureC])
REFERENCES [Texture] ([Id])
GO
ALTER TABLE [TerrainTextureData] CHECK CONSTRAINT [FK_TerrainTextureData_Texture2]
GO
ALTER TABLE [Texture]  WITH CHECK ADD  CONSTRAINT [FK_Texture_TextureSize] FOREIGN KEY([TextureSizeId])
REFERENCES [TextureSize] ([Id])
GO
ALTER TABLE [Texture] CHECK CONSTRAINT [FK_Texture_TextureSize]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE     TRIGGER [TD_Cloud_AFTER] ON [Cloud] AFTER DELETE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'DELETE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'Cloud';

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, D1.Id, D2.LogData
    FROM deleted AS D1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM deleted
                WHERE deleted.Id = D1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS D2
END;
GO
ALTER TABLE [dbo].[Cloud] ENABLE TRIGGER [TD_Cloud_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE     TRIGGER [TU_Cloud_AFTER] ON [Cloud] AFTER UPDATE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'UPDATE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'Cloud';

    SELECT * INTO #ModifiedData FROM (
        SELECT * FROM deleted
        EXCEPT
        SELECT * FROM inserted
    ) AS ModifiedData;

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, M1.Id, M2.LogData
    FROM #ModifiedData AS M1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM #ModifiedData
                WHERE #ModifiedData.Id = M1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS M2
END;
GO
ALTER TABLE [dbo].[Cloud] ENABLE TRIGGER [TU_Cloud_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   TRIGGER [TD_Colour_AFTER] ON [Colour] AFTER DELETE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'DELETE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'Colour';

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, D1.Id, D2.LogData
    FROM deleted AS D1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM deleted
                WHERE deleted.Id = D1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS D2
END;
GO
ALTER TABLE [dbo].[Colour] ENABLE TRIGGER [TD_Colour_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   TRIGGER [TU_Colour_AFTER] ON [Colour] AFTER UPDATE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'UPDATE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'Colour';

    SELECT * INTO #ModifiedData FROM (
        SELECT * FROM deleted
        EXCEPT
        SELECT * FROM inserted
    ) AS ModifiedData;

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, M1.Id, M2.LogData
    FROM #ModifiedData AS M1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM #ModifiedData
                WHERE #ModifiedData.Id = M1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS M2
END;
GO
ALTER TABLE [dbo].[Colour] ENABLE TRIGGER [TU_Colour_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE       TRIGGER [TD_Difficulty_AFTER] ON [Difficulty] AFTER DELETE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'DELETE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'Difficulty';

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, D1.Id, D2.LogData
    FROM deleted AS D1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM deleted
                WHERE deleted.Id = D1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS D2
END;
GO
ALTER TABLE [dbo].[Difficulty] ENABLE TRIGGER [TD_Difficulty_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE       TRIGGER [TU_Difficulty_AFTER] ON [Difficulty] AFTER UPDATE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'UPDATE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'Difficulty';

    SELECT * INTO #ModifiedData FROM (
        SELECT * FROM deleted
        EXCEPT
        SELECT * FROM inserted
    ) AS ModifiedData;

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, M1.Id, M2.LogData
    FROM #ModifiedData AS M1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM #ModifiedData
                WHERE #ModifiedData.Id = M1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS M2
END;
GO
ALTER TABLE [dbo].[Difficulty] ENABLE TRIGGER [TU_Difficulty_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE       TRIGGER [TD_FlatZone_AFTER] ON [FlatZone] AFTER DELETE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'DELETE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'FlatZone';

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, D1.Id, D2.LogData
    FROM deleted AS D1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM deleted
                WHERE deleted.Id = D1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS D2
END;
GO
ALTER TABLE [dbo].[FlatZone] ENABLE TRIGGER [TD_FlatZone_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE       TRIGGER [TU_FlatZone_AFTER] ON [FlatZone] AFTER UPDATE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'UPDATE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'FlatZone';

    SELECT * INTO #ModifiedData FROM (
        SELECT * FROM deleted
        EXCEPT
        SELECT * FROM inserted
    ) AS ModifiedData;

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, M1.Id, M2.LogData
    FROM #ModifiedData AS M1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM #ModifiedData
                WHERE #ModifiedData.Id = M1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS M2
END;
GO
ALTER TABLE [dbo].[FlatZone] ENABLE TRIGGER [TU_FlatZone_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE     TRIGGER [TD_FogKey_AFTER] ON [FogKey] AFTER DELETE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'DELETE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'FogKey';

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, D1.Id, D2.LogData
    FROM deleted AS D1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM deleted
                WHERE deleted.Id = D1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS D2
END;
GO
ALTER TABLE [dbo].[FogKey] ENABLE TRIGGER [TD_FogKey_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE     TRIGGER [TU_FogKey_AFTER] ON [FogKey] AFTER UPDATE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'UPDATE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'FogKey';

    SELECT * INTO #ModifiedData FROM (
        SELECT * FROM deleted
        EXCEPT
        SELECT * FROM inserted
    ) AS ModifiedData;

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, M1.Id, M2.LogData
    FROM #ModifiedData AS M1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM #ModifiedData
                WHERE #ModifiedData.Id = M1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS M2
END;
GO
ALTER TABLE [dbo].[FogKey] ENABLE TRIGGER [TU_FogKey_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE       TRIGGER [TD_FogKeyLink_AFTER] ON [FogKeyLink] AFTER DELETE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'DELETE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'FogKeyLink';

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, D1.Id, D2.LogData
    FROM deleted AS D1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM deleted
                WHERE deleted.Id = D1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS D2
END;
GO
ALTER TABLE [dbo].[FogKeyLink] ENABLE TRIGGER [TD_FogKeyLink_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE       TRIGGER [TU_FogKeyLink_AFTER] ON [FogKeyLink] AFTER UPDATE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'UPDATE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'FogKeyLink';

    SELECT * INTO #ModifiedData FROM (
        SELECT * FROM deleted
        EXCEPT
        SELECT * FROM inserted
    ) AS ModifiedData;

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, M1.Id, M2.LogData
    FROM #ModifiedData AS M1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM #ModifiedData
                WHERE #ModifiedData.Id = M1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS M2
END;
GO
ALTER TABLE [dbo].[FogKeyLink] ENABLE TRIGGER [TU_FogKeyLink_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE       TRIGGER [TD_FogKeySet_AFTER] ON [FogKeySet] AFTER DELETE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'DELETE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'FogKeySet';

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, D1.Id, D2.LogData
    FROM deleted AS D1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM deleted
                WHERE deleted.Id = D1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS D2
END;
GO
ALTER TABLE [dbo].[FogKeySet] ENABLE TRIGGER [TD_FogKeySet_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE       TRIGGER [TU_FogKeySet_AFTER] ON [FogKeySet] AFTER UPDATE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'UPDATE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'FogKeySet';

    SELECT * INTO #ModifiedData FROM (
        SELECT * FROM deleted
        EXCEPT
        SELECT * FROM inserted
    ) AS ModifiedData;

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, M1.Id, M2.LogData
    FROM #ModifiedData AS M1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM #ModifiedData
                WHERE #ModifiedData.Id = M1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS M2
END;
GO
ALTER TABLE [dbo].[FogKeySet] ENABLE TRIGGER [TU_FogKeySet_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE     TRIGGER [TD_Gradient_AFTER] ON [Gradient] AFTER DELETE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'DELETE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'Gradient';

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, D1.Id, D2.LogData
    FROM deleted AS D1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM deleted
                WHERE deleted.Id = D1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS D2
END;
GO
ALTER TABLE [dbo].[Gradient] ENABLE TRIGGER [TD_Gradient_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE     TRIGGER [TU_Gradient_AFTER] ON [Gradient] AFTER UPDATE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'UPDATE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'Gradient';

    SELECT * INTO #ModifiedData FROM (
        SELECT * FROM deleted
        EXCEPT
        SELECT * FROM inserted
    ) AS ModifiedData;

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, M1.Id, M2.LogData
    FROM #ModifiedData AS M1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM #ModifiedData
                WHERE #ModifiedData.Id = M1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS M2
END;
GO
ALTER TABLE [dbo].[Gradient] ENABLE TRIGGER [TU_Gradient_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE       TRIGGER [TD_Heightmap_AFTER] ON [Heightmap] AFTER DELETE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'DELETE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'Heightmap';

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, D1.Id, D2.LogData
    FROM deleted AS D1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM deleted
                WHERE deleted.Id = D1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS D2
END;
GO
ALTER TABLE [dbo].[Heightmap] ENABLE TRIGGER [TD_Heightmap_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE       TRIGGER [TU_Heightmap_AFTER] ON [Heightmap] AFTER UPDATE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'UPDATE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'Heightmap';

    SELECT * INTO #ModifiedData FROM (
        SELECT * FROM deleted
        EXCEPT
        SELECT * FROM inserted
    ) AS ModifiedData;

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, M1.Id, M2.LogData
    FROM #ModifiedData AS M1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM #ModifiedData
                WHERE #ModifiedData.Id = M1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS M2
END;
GO
ALTER TABLE [dbo].[Heightmap] ENABLE TRIGGER [TU_Heightmap_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE       TRIGGER [TD_Landmark_AFTER] ON [Landmark] AFTER DELETE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'DELETE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'Landmark';

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, D1.Id, D2.LogData
    FROM deleted AS D1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM deleted
                WHERE deleted.Id = D1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS D2
END;
GO
ALTER TABLE [dbo].[Landmark] ENABLE TRIGGER [TD_Landmark_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE       TRIGGER [TU_Landmark_AFTER] ON [Landmark] AFTER UPDATE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'UPDATE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'Landmark';

    SELECT * INTO #ModifiedData FROM (
        SELECT * FROM deleted
        EXCEPT
        SELECT * FROM inserted
    ) AS ModifiedData;

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, M1.Id, M2.LogData
    FROM #ModifiedData AS M1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM #ModifiedData
                WHERE #ModifiedData.Id = M1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS M2
END;
GO
ALTER TABLE [dbo].[Landmark] ENABLE TRIGGER [TU_Landmark_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE       TRIGGER [TD_Modifier_AFTER] ON [Modifier] AFTER DELETE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'DELETE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'Modifier';

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, D1.Id, D2.LogData
    FROM deleted AS D1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM deleted
                WHERE deleted.Id = D1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS D2
END;
GO
ALTER TABLE [dbo].[Modifier] ENABLE TRIGGER [TD_Modifier_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE       TRIGGER [TU_Modifier_AFTER] ON [Modifier] AFTER UPDATE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'UPDATE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'Modifier';

    SELECT * INTO #ModifiedData FROM (
        SELECT * FROM deleted
        EXCEPT
        SELECT * FROM inserted
    ) AS ModifiedData;

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, M1.Id, M2.LogData
    FROM #ModifiedData AS M1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM #ModifiedData
                WHERE #ModifiedData.Id = M1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS M2
END;
GO
ALTER TABLE [dbo].[Modifier] ENABLE TRIGGER [TU_Modifier_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   TRIGGER [TD_Planet_AFTER] ON [Planet] AFTER DELETE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'DELETE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'Planet';

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, D1.Id, D2.LogData
    FROM deleted AS D1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM deleted
                WHERE deleted.Id = D1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS D2
END;
GO
ALTER TABLE [dbo].[Planet] ENABLE TRIGGER [TD_Planet_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE   TRIGGER [TU_Planet_AFTER] ON [Planet] AFTER UPDATE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'UPDATE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'Planet';

    SELECT * INTO #ModifiedData FROM (
        SELECT * FROM deleted
        EXCEPT
        SELECT * FROM inserted
    ) AS ModifiedData;

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, M1.Id, M2.LogData
    FROM #ModifiedData AS M1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM #ModifiedData
                WHERE #ModifiedData.Id = M1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS M2
END;
GO
ALTER TABLE [dbo].[Planet] ENABLE TRIGGER [TU_Planet_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE       TRIGGER [TD_PlanetAchievementData_AFTER] ON [PlanetAchievementData] AFTER DELETE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'DELETE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'PlanetAchievementData';

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, D1.Id, D2.LogData
    FROM deleted AS D1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM deleted
                WHERE deleted.Id = D1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS D2
END;
GO
ALTER TABLE [dbo].[PlanetAchievementData] ENABLE TRIGGER [TD_PlanetAchievementData_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE       TRIGGER [TU_PlanetAchievementData_AFTER] ON [PlanetAchievementData] AFTER UPDATE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'UPDATE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'PlanetAchievementData';

    SELECT * INTO #ModifiedData FROM (
        SELECT * FROM deleted
        EXCEPT
        SELECT * FROM inserted
    ) AS ModifiedData;

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, M1.Id, M2.LogData
    FROM #ModifiedData AS M1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM #ModifiedData
                WHERE #ModifiedData.Id = M1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS M2
END;
GO
ALTER TABLE [dbo].[PlanetAchievementData] ENABLE TRIGGER [TU_PlanetAchievementData_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE     TRIGGER [TD_PlanetAtmospherePhysicsData_AFTER] ON [PlanetAtmospherePhysicsData] AFTER DELETE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'DELETE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'PlanetAtmospherePhysicsData';

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, D1.Id, D2.LogData
    FROM deleted AS D1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM deleted
                WHERE deleted.Id = D1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS D2
END;
GO
ALTER TABLE [dbo].[PlanetAtmospherePhysicsData] ENABLE TRIGGER [TD_PlanetAtmospherePhysicsData_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE     TRIGGER [TU_PlanetAtmospherePhysicsData_AFTER] ON [PlanetAtmospherePhysicsData] AFTER UPDATE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'UPDATE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'PlanetAtmospherePhysicsData';

    SELECT * INTO #ModifiedData FROM (
        SELECT * FROM deleted
        EXCEPT
        SELECT * FROM inserted
    ) AS ModifiedData;

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, M1.Id, M2.LogData
    FROM #ModifiedData AS M1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM #ModifiedData
                WHERE #ModifiedData.Id = M1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS M2
END;
GO
ALTER TABLE [dbo].[PlanetAtmospherePhysicsData] ENABLE TRIGGER [TU_PlanetAtmospherePhysicsData_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE       TRIGGER [TD_PlanetAtmosphereVisualsData_AFTER] ON [PlanetAtmosphereVisualsData] AFTER DELETE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'DELETE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'PlanetAtmosphereVisualsData';

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, D1.Id, D2.LogData
    FROM deleted AS D1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM deleted
                WHERE deleted.Id = D1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS D2
END;
GO
ALTER TABLE [dbo].[PlanetAtmosphereVisualsData] ENABLE TRIGGER [TD_PlanetAtmosphereVisualsData_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE       TRIGGER [TU_PlanetAtmosphereVisualsData_AFTER] ON [PlanetAtmosphereVisualsData] AFTER UPDATE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'UPDATE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'PlanetAtmosphereVisualsData';

    SELECT * INTO #ModifiedData FROM (
        SELECT * FROM deleted
        EXCEPT
        SELECT * FROM inserted
    ) AS ModifiedData;

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, M1.Id, M2.LogData
    FROM #ModifiedData AS M1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM #ModifiedData
                WHERE #ModifiedData.Id = M1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS M2
END;
GO
ALTER TABLE [dbo].[PlanetAtmosphereVisualsData] ENABLE TRIGGER [TU_PlanetAtmosphereVisualsData_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE   TRIGGER [TD_PlanetBaseData_AFTER] ON [PlanetBaseData] AFTER DELETE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'DELETE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'PlanetBaseData';

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, D1.Id, D2.LogData
    FROM deleted AS D1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM deleted
                WHERE deleted.Id = D1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS D2
END;
GO
ALTER TABLE [dbo].[PlanetBaseData] ENABLE TRIGGER [TD_PlanetBaseData_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE   TRIGGER [TU_PlanetBaseData_AFTER] ON [PlanetBaseData] AFTER UPDATE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'UPDATE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'PlanetBaseData';

    SELECT * INTO #ModifiedData FROM (
        SELECT * FROM deleted
        EXCEPT
        SELECT * FROM inserted
    ) AS ModifiedData;

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, M1.Id, M2.LogData
    FROM #ModifiedData AS M1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM #ModifiedData
                WHERE #ModifiedData.Id = M1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS M2
END;
GO
ALTER TABLE [dbo].[PlanetBaseData] ENABLE TRIGGER [TU_PlanetBaseData_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE       TRIGGER [TD_PlanetLandmark_AFTER] ON [PlanetLandmark] AFTER DELETE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'DELETE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'PlanetLandmark';

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, D1.Id, D2.LogData
    FROM deleted AS D1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM deleted
                WHERE deleted.Id = D1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS D2
END;
GO
ALTER TABLE [dbo].[PlanetLandmark] ENABLE TRIGGER [TD_PlanetLandmark_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE       TRIGGER [TU_PlanetLandmark_AFTER] ON [PlanetLandmark] AFTER UPDATE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'UPDATE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'PlanetLandmark';

    SELECT * INTO #ModifiedData FROM (
        SELECT * FROM deleted
        EXCEPT
        SELECT * FROM inserted
    ) AS ModifiedData;

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, M1.Id, M2.LogData
    FROM #ModifiedData AS M1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM #ModifiedData
                WHERE #ModifiedData.Id = M1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS M2
END;
GO
ALTER TABLE [dbo].[PlanetLandmark] ENABLE TRIGGER [TU_PlanetLandmark_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE       TRIGGER [TD_PlanetOrbitData_AFTER] ON [PlanetOrbitData] AFTER DELETE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'DELETE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'PlanetOrbitData';

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, D1.Id, D2.LogData
    FROM deleted AS D1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM deleted
                WHERE deleted.Id = D1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS D2
END;
GO
ALTER TABLE [dbo].[PlanetOrbitData] ENABLE TRIGGER [TD_PlanetOrbitData_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE       TRIGGER [TU_PlanetOrbitData_AFTER] ON [PlanetOrbitData] AFTER UPDATE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'UPDATE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'PlanetOrbitData';

    SELECT * INTO #ModifiedData FROM (
        SELECT * FROM deleted
        EXCEPT
        SELECT * FROM inserted
    ) AS ModifiedData;

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, M1.Id, M2.LogData
    FROM #ModifiedData AS M1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM #ModifiedData
                WHERE #ModifiedData.Id = M1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS M2
END;
GO
ALTER TABLE [dbo].[PlanetOrbitData] ENABLE TRIGGER [TU_PlanetOrbitData_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE       TRIGGER [TD_PlanetPostProcessing_AFTER] ON [PlanetPostProcessing] AFTER DELETE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'DELETE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'PlanetPostProcessing';

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, D1.Id, D2.LogData
    FROM deleted AS D1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM deleted
                WHERE deleted.Id = D1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS D2
END;
GO
ALTER TABLE [dbo].[PlanetPostProcessing] ENABLE TRIGGER [TD_PlanetPostProcessing_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE       TRIGGER [TU_PlanetPostProcessing_AFTER] ON [PlanetPostProcessing] AFTER UPDATE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'UPDATE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'PlanetPostProcessing';

    SELECT * INTO #ModifiedData FROM (
        SELECT * FROM deleted
        EXCEPT
        SELECT * FROM inserted
    ) AS ModifiedData;

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, M1.Id, M2.LogData
    FROM #ModifiedData AS M1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM #ModifiedData
                WHERE #ModifiedData.Id = M1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS M2
END;
GO
ALTER TABLE [dbo].[PlanetPostProcessing] ENABLE TRIGGER [TU_PlanetPostProcessing_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE       TRIGGER [TD_PostProcessingKey_AFTER] ON [PostProcessingKey] AFTER DELETE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'DELETE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'PostProcessingKey';

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, D1.Id, D2.LogData
    FROM deleted AS D1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM deleted
                WHERE deleted.Id = D1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS D2
END;
GO
ALTER TABLE [dbo].[PostProcessingKey] ENABLE TRIGGER [TD_PostProcessingKey_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE       TRIGGER [TU_PostProcessingKey_AFTER] ON [PostProcessingKey] AFTER UPDATE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'UPDATE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'PostProcessingKey';

    SELECT * INTO #ModifiedData FROM (
        SELECT * FROM deleted
        EXCEPT
        SELECT * FROM inserted
    ) AS ModifiedData;

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, M1.Id, M2.LogData
    FROM #ModifiedData AS M1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM #ModifiedData
                WHERE #ModifiedData.Id = M1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS M2
END;
GO
ALTER TABLE [dbo].[PostProcessingKey] ENABLE TRIGGER [TU_PostProcessingKey_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE       TRIGGER [TD_TerrainData_AFTER] ON [TerrainData] AFTER DELETE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'DELETE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'TerrainData';

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, D1.Id, D2.LogData
    FROM deleted AS D1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM deleted
                WHERE deleted.Id = D1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS D2
END;
GO
ALTER TABLE [dbo].[TerrainData] ENABLE TRIGGER [TD_TerrainData_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE       TRIGGER [TU_TerrainData_AFTER] ON [TerrainData] AFTER UPDATE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'UPDATE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'TerrainData';

    SELECT * INTO #ModifiedData FROM (
        SELECT * FROM deleted
        EXCEPT
        SELECT * FROM inserted
    ) AS ModifiedData;

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, M1.Id, M2.LogData
    FROM #ModifiedData AS M1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM #ModifiedData
                WHERE #ModifiedData.Id = M1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS M2
END;
GO
ALTER TABLE [dbo].[TerrainData] ENABLE TRIGGER [TU_TerrainData_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE       TRIGGER [TD_TerrainDataFlatZone_AFTER] ON [TerrainDataFlatZone] AFTER DELETE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'DELETE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'TerrainDataFlatZone';

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, D1.Id, D2.LogData
    FROM deleted AS D1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM deleted
                WHERE deleted.Id = D1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS D2
END;
GO
ALTER TABLE [dbo].[TerrainDataFlatZone] ENABLE TRIGGER [TD_TerrainDataFlatZone_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE       TRIGGER [TU_TerrainDataFlatZone_AFTER] ON [TerrainDataFlatZone] AFTER UPDATE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'UPDATE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'TerrainDataFlatZone';

    SELECT * INTO #ModifiedData FROM (
        SELECT * FROM deleted
        EXCEPT
        SELECT * FROM inserted
    ) AS ModifiedData;

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, M1.Id, M2.LogData
    FROM #ModifiedData AS M1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM #ModifiedData
                WHERE #ModifiedData.Id = M1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS M2
END;
GO
ALTER TABLE [dbo].[TerrainDataFlatZone] ENABLE TRIGGER [TU_TerrainDataFlatZone_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE       TRIGGER [TD_TerrainDataFormulaDifficulty_AFTER] ON [TerrainDataFormulaDifficulty] AFTER DELETE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'DELETE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'TerrainDataFormulaDifficulty';

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, D1.Id, D2.LogData
    FROM deleted AS D1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM deleted
                WHERE deleted.Id = D1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS D2
END;
GO
ALTER TABLE [dbo].[TerrainDataFormulaDifficulty] ENABLE TRIGGER [TD_TerrainDataFormulaDifficulty_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE       TRIGGER [TU_TerrainDataFormulaDifficulty_AFTER] ON [TerrainDataFormulaDifficulty] AFTER UPDATE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'UPDATE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'TerrainDataFormulaDifficulty';

    SELECT * INTO #ModifiedData FROM (
        SELECT * FROM deleted
        EXCEPT
        SELECT * FROM inserted
    ) AS ModifiedData;

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, M1.Id, M2.LogData
    FROM #ModifiedData AS M1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM #ModifiedData
                WHERE #ModifiedData.Id = M1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS M2
END;
GO
ALTER TABLE [dbo].[TerrainDataFormulaDifficulty] ENABLE TRIGGER [TU_TerrainDataFormulaDifficulty_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE       TRIGGER [TD_TerrainFormula_AFTER] ON [TerrainFormula] AFTER DELETE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'DELETE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'TerrainFormula';

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, D1.Id, D2.LogData
    FROM deleted AS D1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM deleted
                WHERE deleted.Id = D1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS D2
END;
GO
ALTER TABLE [dbo].[TerrainFormula] ENABLE TRIGGER [TD_TerrainFormula_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE       TRIGGER [TU_TerrainFormula_AFTER] ON [TerrainFormula] AFTER UPDATE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'UPDATE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'TerrainFormula';

    SELECT * INTO #ModifiedData FROM (
        SELECT * FROM deleted
        EXCEPT
        SELECT * FROM inserted
    ) AS ModifiedData;

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, M1.Id, M2.LogData
    FROM #ModifiedData AS M1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM #ModifiedData
                WHERE #ModifiedData.Id = M1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS M2
END;
GO
ALTER TABLE [dbo].[TerrainFormula] ENABLE TRIGGER [TU_TerrainFormula_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE       TRIGGER [TD_TerrainFormulaLink_AFTER] ON [TerrainFormulaLink] AFTER DELETE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'DELETE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'TerrainFormulaLink';

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, D1.Id, D2.LogData
    FROM deleted AS D1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM deleted
                WHERE deleted.Id = D1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS D2
END;
GO
ALTER TABLE [dbo].[TerrainFormulaLink] ENABLE TRIGGER [TD_TerrainFormulaLink_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE       TRIGGER [TU_TerrainFormulaLink_AFTER] ON [TerrainFormulaLink] AFTER UPDATE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'UPDATE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'TerrainFormulaLink';

    SELECT * INTO #ModifiedData FROM (
        SELECT * FROM deleted
        EXCEPT
        SELECT * FROM inserted
    ) AS ModifiedData;

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, M1.Id, M2.LogData
    FROM #ModifiedData AS M1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM #ModifiedData
                WHERE #ModifiedData.Id = M1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS M2
END;
GO
ALTER TABLE [dbo].[TerrainFormulaLink] ENABLE TRIGGER [TU_TerrainFormulaLink_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE       TRIGGER [TD_TerrainFormulaSet_AFTER] ON [TerrainFormulaSet] AFTER DELETE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'DELETE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'TerrainFormulaSet';

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, D1.Id, D2.LogData
    FROM deleted AS D1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM deleted
                WHERE deleted.Id = D1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS D2
END;
GO
ALTER TABLE [dbo].[TerrainFormulaSet] ENABLE TRIGGER [TD_TerrainFormulaSet_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE       TRIGGER [TU_TerrainFormulaSet_AFTER] ON [TerrainFormulaSet] AFTER UPDATE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'UPDATE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'TerrainFormulaSet';

    SELECT * INTO #ModifiedData FROM (
        SELECT * FROM deleted
        EXCEPT
        SELECT * FROM inserted
    ) AS ModifiedData;

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, M1.Id, M2.LogData
    FROM #ModifiedData AS M1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM #ModifiedData
                WHERE #ModifiedData.Id = M1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS M2
END;
GO
ALTER TABLE [dbo].[TerrainFormulaSet] ENABLE TRIGGER [TU_TerrainFormulaSet_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE       TRIGGER [TD_TerrainTextureData_AFTER] ON [TerrainTextureData] AFTER DELETE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'DELETE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'TerrainTextureData';

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, D1.Id, D2.LogData
    FROM deleted AS D1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM deleted
                WHERE deleted.Id = D1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS D2
END;
GO
ALTER TABLE [dbo].[TerrainTextureData] ENABLE TRIGGER [TD_TerrainTextureData_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE       TRIGGER [TU_TerrainTextureData_AFTER] ON [TerrainTextureData] AFTER UPDATE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'UPDATE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'TerrainTextureData';

    SELECT * INTO #ModifiedData FROM (
        SELECT * FROM deleted
        EXCEPT
        SELECT * FROM inserted
    ) AS ModifiedData;

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, M1.Id, M2.LogData
    FROM #ModifiedData AS M1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM #ModifiedData
                WHERE #ModifiedData.Id = M1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS M2
END;
GO
ALTER TABLE [dbo].[TerrainTextureData] ENABLE TRIGGER [TU_TerrainTextureData_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE       TRIGGER [TD_Texture_AFTER] ON [Texture] AFTER DELETE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'DELETE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'Texture';

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, D1.Id, D2.LogData
    FROM deleted AS D1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM deleted
                WHERE deleted.Id = D1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS D2
END;
GO
ALTER TABLE [dbo].[Texture] ENABLE TRIGGER [TD_Texture_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE       TRIGGER [TU_Texture_AFTER] ON [Texture] AFTER UPDATE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'UPDATE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'Texture';

    SELECT * INTO #ModifiedData FROM (
        SELECT * FROM deleted
        EXCEPT
        SELECT * FROM inserted
    ) AS ModifiedData;

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, M1.Id, M2.LogData
    FROM #ModifiedData AS M1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM #ModifiedData
                WHERE #ModifiedData.Id = M1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS M2
END;
GO
ALTER TABLE [dbo].[Texture] ENABLE TRIGGER [TU_Texture_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE       TRIGGER [TD_TextureSize_AFTER] ON [TextureSize] AFTER DELETE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'DELETE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'TextureSize';

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, D1.Id, D2.LogData
    FROM deleted AS D1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM deleted
                WHERE deleted.Id = D1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS D2
END;
GO
ALTER TABLE [dbo].[TextureSize] ENABLE TRIGGER [TD_TextureSize_AFTER]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE       TRIGGER [TU_TextureSize_AFTER] ON [TextureSize] AFTER UPDATE AS
BEGIN
    IF (ROWCOUNT_BIG() = 0)
        RETURN;
    
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM deleted)
        RETURN;
    
    DECLARE @operationType nvarchar(16) = 'UPDATE';
    DECLARE @databaseName nvarchar(64) = 'SpaceFlightSimulator';
    DECLARE @schemaName nvarchar(64) = 'dbo';
    DECLARE @tableName nvarchar(64) = 'TextureSize';

    SELECT * INTO #ModifiedData FROM (
        SELECT * FROM deleted
        EXCEPT
        SELECT * FROM inserted
    ) AS ModifiedData;

    INSERT INTO AuditLog (TriggerDate, SourceContext, Operation, DatabaseName, SchemaName, TableName, TableId, LogData)
    SELECT SYSDATETIME(), SYSTEM_USER, @operationType, @databaseName, @schemaName, @tableName, M1.Id, M2.LogData
    FROM #ModifiedData AS M1
        CROSS APPLY (
            SELECT LogData = (
                SELECT *
                FROM #ModifiedData
                WHERE #ModifiedData.Id = M1.Id
                FOR JSON PATH,
                INCLUDE_NULL_VALUES,
                WITHOUT_ARRAY_WRAPPER
            )
        ) AS M2
END;
GO
ALTER TABLE [dbo].[TextureSize] ENABLE TRIGGER [TU_TextureSize_AFTER]
GO
